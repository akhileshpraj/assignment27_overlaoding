1
#include<iostream>
using namespace std;
class Complex
{
    int real,img;
    public:
    void get()
    {
        cin>>real>>img;
    }
    
    void display()
    {
        cout<<real <<" + "<<img <<" i "<<endl;
    }
    Complex()
   {
    
   }
    friend Complex operator+(Complex c1,Complex c2 );
    friend Complex operator-(Complex c1,Complex c2 );
    friend Complex operator*(Complex c1,Complex c2 );
};
     Complex operator+(Complex c1,Complex c2 )
    {
         Complex temp;
         temp.real=c1.real+c2.real;
         temp.img=c1.img+c2.img;
         return temp;
    }
    Complex operator-(Complex c1,Complex c2 )
    {
         Complex temp;
         temp.real=c1.real-c2.real;
         temp.img=c1.img-c2.img;
         return temp;
    }
     Complex operator*(Complex c1,Complex c2 ) 
    {
         Complex temp;
         temp.real=c1.real*c2.real;
         temp.img=c1.img*c2.img;
         return temp;
    }
int main()
{
    Complex r1,r2,r3,r4,r5;
    r1.get();
    r2.get();
    r1.display();
    r2.display();
     r3=r1+r2;
    r3.display();
    r4=r2-r1;
    r4.display();
    r5=r1*r2;
    r5.display();
}
2
#include<iostream>
using namespace std;
class  overload
{
    int a;
    public:
    overload()
    {

    }
    overload(int x)
    {
        a=x;
    }
    void display()
    {
        cout<<"a "<<a<<endl;
    }
    overload operator++(int )
    {
        overload temp;
        temp.a=a++;
         return temp;
    }
    overload operator--(int )
    {
        overload temp;
        temp.a=a--;
         return temp;
    }
};
int main()
{
    overload o1(5);
    (o1++).display();
    (o1--).display();
    cout<<endl;
    return  0;
}
3
#include<iostream>
using namespace std;
class Complex
{
    int a,b;
    public:
    Complex()
    {

    }
    Complex(int x,int y)
    {
        a=x,b=y;
    }
    Complex (const Complex &c)
    {
        a=c.a;
        b=c.b;
    }
    void setoutput()
    {
        cout<<"a " <<a <<" "<<"b " <<" "<<b <<endl;
    }
    friend Complex operator+(Complex m,Complex n);
};
 Complex operator+(Complex m,Complex n)
{
    Complex temp;
    temp.a=m.a+n.a;
    temp.b=m.b+n.b;
    return temp;
}
int main()
{
    Complex c1(2,3);
    Complex c2=c1;
    Complex c3=c1+c2;
    c1.setoutput();
     c2.setoutput();
      c3.setoutput();
      cout<<endl;
      return 0;
}
4
#include<iostream>
using namespace std;
class Time
{
    int hours,min,sec;
    public:
    Time(){ 

    }
    friend int operator>>(istream &input,Time &t)
    {
        cout<<"Enter Hours:-";
        input>>t.hours;
        cout<<"Enter minutes:-";
        input>>t.min;
        cout<<"Enter second:-";
        input>>t.sec;
        t.min=t.min+t.sec/60;
        t.sec=t.sec%60;
        t.hours=t.hours+t.min/60;
        t.min=t.min%60;
        if(t.hours>=25)
        return 1;
        else 
        return 0;
    }
    
    int operator==(Time t)
    {
         int tot=t.hours*3600+t.min*60+t.sec;
         int tot1=t.hours*3600+t.min*60+t.sec;
         if(tot==tot1)
         return 1;
         else
         return 0;
    }
    friend void operator<<(ostream &output,Time t)
    {
        output<<"\nHours :-"<<t.hours<<endl;
        output<<"\nminute :-"<<t.min<<endl;
        output<<"nsecond :-"<<t.sec<<endl;
    }
    ~Time(){ }
};
int main()
{
    Time t,t1;
    cout<<"Enter first time:-";
    cout<<"\n";
    if(cin>>t)
    {
        cout<<"\n\n invalid time ";
         return 0;
    }
    cout<<"\n\nFirst time:-"<<endl;
    cout<<t;
    cout<<"\n\nEnter second time:-";
    if(cin>>t1)
   {
    cout<<"\n\n invalid time:-";
    return 0;
   } 
   cout<<"\n\nEnter second time:-";
   cout<<t1;
   if(t==t1)
   cout<<"\n\n Time are same:-";
   else
   cout<<"\n\n time is different:-";
   return 0;
}
5
#include<iostream>
using namespace std;
class Numbers
{
    int a,b,c;
    public:
    void get()
    {
        cout<<"1st numbers:-";
        cin>>a;
        cout<<"2st numbers:-";
        cin>>b;
        cout<<"3rd numbers:-";
        cin>>c;
    }
    void puts()
    {
        cout<<"a "<<a<<" "<<"b "<<b<<" "<<"c "<<c<<endl;
    }
    void operator-()
    {
        a=-a;
        b=-b;
        c=-c;
    }
};
int main()
{
    Numbers n1,n2;
    n1.get();
    n2.get();
    n1.puts();
    n2.puts();
    -n1,-n2;
    n1.puts();
    n2.puts();
}
6
#include<iostream>
#include<string.h>
using namespace std;
class cstring
{
    char str[20];
    public:
    void get()
    {
        cout<<"\n Enter string:-";
        cin>>str;
    }
    void display()
    {
        cout<<str<<endl;
    }
    cstring operator+(cstring c)
    {
        cstring s;
        strcpy(s.str,str);
        strcpy(s.str,c.str);
        return s;
    }
    int operator==(cstring &t);
};
int cstring::operator==(cstring &t)
{
    for(int i=0;str[i]!='\0';i++)
    {
        for(int j=0;t.str[j]!='\0';j++)
        {
            if(str[i]==t.str[j])
            {
                return 0;
            }
         else
            {
                return 1;
            }
        }
    }
}
int main()
{
    cstring c1,c2,c3;
    int result=0;
    c1.get();
    c2.get();
    cout<<"first string\n:-";
    c1.display();
    cout<<"2nd string\n:-";
    c2.display();
    c3=c1+c2;
    c3.display();
     result=c1==c2;
     if(result==0)
     {
        cout<<"string is same:-";
     }
     else 
     {
        cout<<"string is not same";
     }

}
7
#include<iostream>
using namespace std;
class fraction
{
    int numo;
    int deno;
    public:
    fraction(long int n=0,long int d=0)
    {
        numo=n;
        deno=d;
    }
    friend void operator>>(istream &in,fraction &f)
    {
        cout<<"\nNumerator  : ";
        in>>f.numo;
        cout<<"\ndenominator : ";
        in>>f.deno;
    }
    friend void operator<<(ostream &out,fraction &f)
    {
        out<<f.numo <<" / "<<f.deno<<endl;
    }
    fraction operator++()
    {
        ++numo;
        ++deno;
        return (*this);
    }
    fraction operator++(int s)
    {
         fraction temp=*this;
         numo++;
         deno++;
         return temp;
    }
};
int main()
{
    fraction f1,f2;
    cout<<"]nf1    :";
    cout<<f1;
    cout<<"\nf2     :";
    cout<<f2;
    cout<<"\n\n1st fraction value:-";
    cin>>f1;
    cout<<"\nf1++  :";
    f1++;
    cout<<"\n++f1  :";
    ++f1;
    cout<<f1;
    cout<<"\n\nEnter 2nd fraction  value:-";
    cin>>f2;
    f2=++f1;
    cout<<"\n f2=++f1  :";
    cout<<"\nf1    :";
    cout<<f1;
    cout<<"\nf2    :";
    cout<<f2;
    f2=f1++;
    cout<<"\n\nf2=f1++   :";
    cout<<"\nf1    :";
    cout<<"\nf2   :";
    cout<<f2;
    return 0;
}
8
#include<iostream>
using namespace std;
class matrix
{
   int n,i,j,a[3][3];
   public:
   void input();
   void display();
   void operator-();
};
void matrix::input()
{
    cout<<"\nEnter a 3*3 matrix:-";
    cin>>n;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<" ";
            cin>>a[i][j];
        }
    }
}
void matrix::display()
{
    cout<<"marix are:-\n";
    for(i=0;i<n;i++)
    {
       for(j=0;j<n;j++)
       {
          cout<<a[i][j]<<" ";
       }
       cout<<"\n";
    }
}
void matrix::operator-()
{
    for(i=0;i<n;i++)
    {
       for(j=0;j<n;j++)
       {
           a[i][j]=-a[i][j];
       }
       cout<<"\n";
    }
}
int main()
{
    matrix m1;
    m1.input();
    m1.display();
    -m1;
    m1.display();
    cout<<endl;
    return 0;
}
9
#include<iostream>
#include<string>
using namespace std;
class mystring
{
    char str[100];
    public:
    void input()
    {
        cout<<"Enter the input:-";
        cin>>str;
    }
    void output()
    {
        cout<<"\n output is:--";
        cout<<str<<" ";
    }
    void operator!()
    {
        for(int i=0;str[i]!='\0';i++)
        {
            if(str[i]>=65 && str[i]<=90)
            {
            str[i]=str[i]+32;
            }
            else if(str[i]>=97 && str[i]<=122)
            {
            str[i]=str[i]-32;
             }
        } 
    }
};
int main()
{
    mystring m1;
    m1.input();
    m1.output();
    !m1;
    cout<<"\nnew string";
     m1.output();
    cout<<endl;
    return 0;
}
10
#include<iostream>
using namespace std;
class matrix
{
    int i,j,a[3][3],n;
    public:
    void input();
    void display();
    void operator+(matrix);
};
void matrix::input()
{
    cout<<"Enter a 3*3 of the matrix:-";
    cin>>n;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<" ";
            cin>>a[i][j];
        }
    }
}
void matrix::display()
{
    cout<<"\nmatrix is:-";
    for(i=0;i<n;i++)
    {
        cout<<"\n";
        for(j=0;j<n;j++)
        {
            cout<<a[i][j]<<" ";
        }
    }
}
void matrix:: operator + (matrix m)
{
    int c[3][3];
    for(i=0;i<n;i++)
    {
        cout<<"\n";
        for(j=0;j<n;j++)
        {
            c[i][j]=a[i][j]+m.a[i][j];
        }
    }
    cout<<"\nadd this matrix:-";
     for(i=0;i<n;i++)
    {
        cout<<"\n";
        for(j=0;j<n;j++)
        {
            cout<< c[i][j]<<" ";
        }
    }
}
int main()
{
    matrix m1,m2,m3;
    m1.input();
    m2.input();
    m1.display();
    m2.display();
    m1+m2;
    cout<<endl;
    return 0;
}

